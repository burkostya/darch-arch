mount_handler_darch() {
    msg Darch mount handler

    local destination_root device path imagedev_mountpoint rootfs_ro_mountpoint rootfs_rw_mountpoint

    destination_root="${1}"
    device="${darch_dir%%:*}"
    path="${darch_dir##*:}"
        
    imagedev_mountpoint="/image_source"
    rootfs_ro_mountpoint="/squashfs.ro"
    rootfs_rw_mountpoint="/squashfs.rw"

    mkdir "${imagedev_mountpoint}"
    mkdir "${rootfs_ro_mountpoint}"
    mkdir "${rootfs_rw_mountpoint}"

    msg "Trying to mount Darch source (${device})"
    mount "${device}" "${imagedev_mountpoint}"

    if [[ ! $? -eq 0 ]]; then
        err "Unable to mount Darch source: ${device}"
        echo "You are being dropped to a shell"
        echo "Try to mount your darch device in ${imagedev_mountpoint}"
        launch_interactive_shell
        msg "Trying to continue..."
    fi

    grep "${imagedev_mountpoint}" /proc/mounts > /dev/null 2>&1

    if [[ ! $? -eq 0 ]]; then
        error "Darch root device still not mounted"
        echo "You are on your own now..."
        launch_interactive_shell
        msg "Trying to continue (this will most likely fail)..."
    fi
    
    path="${imagedev_mountpoint}/${path}"

    if [[ ! -r "${path}/${darch_rootfs}" ]]; then
        err "SquashFS image (${path}/${darch_rootfs}) is not found (or it is not readable)"
        echo "Try to move or link image to ${path}/${path_rootfs}"
        launch_interactive_shell
        msg "Trying to continue (this will most likely fail)..."
    fi

    mount -t squashfs "${path}/${darch_rootfs}" "${rootfs_ro_mountpoint}"

    if [[ ! $? -eq 0 ]]; then
        err "Unable to mount SquashFS image..."
        launch_interactive_shell
    fi

    mount -t tmpfs -o rw,noatime,mode=755 tmpfs "${rootfs_rw_mountpoint}"
    mkdir -p "${rootfs_rw_mountpoint}/upperdir" "${rootfs_rw_mountpoint}/work"
    mount -t overlay overlay -o "lowerdir=${rootfs_ro_mountpoint},upperdir=${rootfs_rw_mountpoint}/upperdir,workdir=${rootfs_rw_mountpoint}/work" "${destination_root}"

    if [[ ! $? -eq 0 ]]; then
        err "Couldn't mount overlay filesystem..."
        launch_interactive_shell
    fi

    if [ -e "${path}/hooks" ]; then
        for hook_dir in ${path}/hooks/*; do
            hook_name=`basename ${hook_dir}`
            export DARCH_ROOT_FS="${destination_root}"
            export DARCH_HOOK_DIR="${path}/hooks/${hook_name}"
            /usr/bin/env sh -c ". $DARCH_HOOK_DIR/hook && run"
        done
    fi
}

run_hook() {
    if [[ -z ${darch_dir} ]]; then
        return 0;
    fi
    mount_handler=mount_handler_darch
}
